//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31833905
// Cuda compilation tools, release 11.8, V11.8.89
// Based on NVVM 7.0.1
//

.version 7.8
.target sm_52
.address_size 64

	// .globl	__raygen__rg
.const .align 8 .b8 params[32];
.global .align 4 .u32 _ZZN5Eigen8internal21transform_make_affineILi2EE3runINS_6MatrixIfLi4ELi4ELi0ELi4ELi4EEEEEvRT_E3Dim = 3;

.visible .entry __raygen__rg()
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<10>;
	.reg .b32 	%r<84>;
	.reg .b64 	%rd<9>;


	// begin inline asm
	call (%r2), _optix_get_launch_index_x, ();
	// end inline asm
	// begin inline asm
	call (%r3), _optix_get_launch_index_y, ();
	// end inline asm
	// begin inline asm
	call (%r4), _optix_get_launch_index_z, ();
	// end inline asm
	// begin inline asm
	call (%r5), _optix_get_launch_dimension_x, ();
	// end inline asm
	// begin inline asm
	call (%r6), _optix_get_launch_dimension_y, ();
	// end inline asm
	mad.lo.s32 	%r8, %r6, %r4, %r3;
	mad.lo.s32 	%r1, %r8, %r5, %r2;
	ld.const.u32 	%r9, [params];
	setp.gt.u32 	%p1, %r1, %r9;
	@%p1 bra 	$L__BB0_2;

	ld.const.u64 	%rd1, [params+24];
	ld.const.u64 	%rd2, [params+8];
	cvta.to.global.u64 	%rd3, %rd2;
	mul.wide.u32 	%rd4, %r1, 12;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	ld.global.f32 	%f2, [%rd5+4];
	ld.global.f32 	%f3, [%rd5+8];
	ld.const.u64 	%rd6, [params+16];
	cvta.to.global.u64 	%rd7, %rd6;
	add.s64 	%rd8, %rd7, %rd4;
	ld.global.f32 	%f4, [%rd8];
	ld.global.f32 	%f5, [%rd8+4];
	ld.global.f32 	%f6, [%rd8+8];
	mov.f32 	%f8, 0f5A0E1BCA;
	mov.f32 	%f9, 0f00000000;
	mov.u32 	%r43, 255;
	mov.u32 	%r46, 1;
	mov.u32 	%r48, 3;
	mov.u32 	%r80, 0;
	// begin inline asm
	call(%r10,%r11,%r12,%r13,%r14,%r15,%r16,%r17,%r18,%r19,%r20,%r21,%r22,%r23,%r24,%r25,%r26,%r27,%r28,%r29,%r30,%r31,%r32,%r33,%r34,%r35,%r36,%r37,%r38,%r39,%r40,%r41),_optix_trace_typed_32,(%r80,%rd1,%f1,%f2,%f3,%f4,%f5,%f6,%f9,%f8,%f9,%r43,%r80,%r80,%r46,%r80,%r48,%r81,%r82,%r83,%r80,%r80,%r80,%r80,%r80,%r80,%r80,%r80,%r80,%r80,%r80,%r80,%r80,%r80,%r80,%r80,%r80,%r80,%r80,%r80,%r80,%r80,%r80,%r80,%r80,%r80,%r80,%r80,%r80);
	// end inline asm

$L__BB0_2:
	ret;

}
	// .globl	__miss__ms
.visible .entry __miss__ms()
{
	.reg .b32 	%r<7>;
	.reg .b64 	%rd<2>;


	// begin inline asm
	call (%rd1), _optix_get_sbt_data_ptr_64, ();
	// end inline asm
	ld.u32 	%r2, [%rd1];
	ld.u32 	%r4, [%rd1+4];
	ld.u32 	%r6, [%rd1+8];
	mov.u32 	%r1, 0;
	// begin inline asm
	call _optix_set_payload, (%r1, %r2);
	// end inline asm
	mov.u32 	%r3, 1;
	// begin inline asm
	call _optix_set_payload, (%r3, %r4);
	// end inline asm
	mov.u32 	%r5, 2;
	// begin inline asm
	call _optix_set_payload, (%r5, %r6);
	// end inline asm
	ret;

}
	// .globl	__closesthit__ch
.visible .entry __closesthit__ch()
{
	.reg .f32 	%f<3>;
	.reg .b32 	%r<7>;


	// begin inline asm
	call (%f1, %f2), _optix_get_triangle_barycentrics, ();
	// end inline asm
	mov.b32 	%r2, %f1;
	mov.u32 	%r1, 0;
	// begin inline asm
	call _optix_set_payload, (%r1, %r2);
	// end inline asm
	mov.b32 	%r4, %f2;
	mov.u32 	%r3, 1;
	// begin inline asm
	call _optix_set_payload, (%r3, %r4);
	// end inline asm
	mov.u32 	%r5, 2;
	mov.u32 	%r6, 1065353216;
	// begin inline asm
	call _optix_set_payload, (%r5, %r6);
	// end inline asm
	ret;

}

